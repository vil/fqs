#!/usr/bin/env bash
# |---------------------------------------|
# | Copyright (c) 2024-2025 Vili. GPL-3.0 |
# |---------------------------------------|
#        Made in Finland, with love.

set -euo pipefail
IFS=$'\n\t'

# Check if a command exists
command_exists() {
    command -v "$1" &>/dev/null
}

# Performs a full system upgrade.
sys_update() {
    sudo dnf upgrade --refresh -y
}

# Adds and enables the RPM Fusion repositories.
add_rpm_repos() {
    local fedora_ver
    fedora_ver="$(rpm -E %fedora)"
    sudo dnf install -y "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-${fedora_ver}.noarch.rpm" \
                         "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-${fedora_ver}.noarch.rpm"
    sudo dnf install -y dnf-plugins-core
    sudo dnf group upgrade core -y
}

# Adds and enables the Flathub remote.
add_flatpak_repos() {
    if ! command_exists flatpak; then
        echo "Flatpak not found. Installing flatpak..."
        sudo dnf install flatpak -y
    fi
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

# Appends performance-friendly options to /etc/dnf/dnf.conf.
append_dnf_configs() {
    local conf_file="/etc/dnf/dnf.conf"
    sudo tee -a "$conf_file" >/dev/null <<'EOF'
gpgcheck=1
clean_requirements_on_remove=True
skip_if_unavailable=True
deltarpm=False
best=False
keepcache=True
installonly_limit=3
max_parallel_downloads=10
defaultyes=True
EOF
    sudo dnf upgrade --refresh -y
}

# Install the preferred code editor.
install_code_editor() {
    echo "Choose your preferred code editor:"
    echo "  1. Visual Studio Code (https://code.visualstudio.com/)"
    echo "  2. VSCodium (https://vscodium.com/)"
    echo "  3. Zed (https://zed.dev)"
    echo "  4. NeoVim+NvChad (https://neovim.io/ with NvChad https://nvchad.com)"
    read -r -p "Enter the number of your preferred editor: " choice

    case "$choice" in
        1)
            sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
            echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" | sudo tee /etc/yum.repos.d/vscode.repo >/dev/null
            sudo dnf upgrade --refresh -y && sudo dnf install code -y
            ;;
        2)
            sudo rpmkeys --import https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg
            printf "[gitlab.com_paulcarroty_vscodium_repo]\nname=VSCodium Repository\nbaseurl=https://download.vscodium.com/rpms/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg\nmetadata_expire=1h\n" | sudo tee /etc/yum.repos.d/vscodium.repo
            sudo dnf upgrade --refresh -y && sudo dnf install codium -y
            ;;
        3)
            curl -f https://zed.dev/install.sh | sh
            ;;
        4)
            sudo dnf upgrade --refresh -y && sudo dnf install neovim -y
            git clone https://github.com/NvChad/starter ~/.config/nvim
            nvim
            ;;
        *)
            echo "Invalid choice. No editor installed."
            ;;
    esac
}

# Install the preferred browser.
install_browser() {
    echo "Choose your preferred browser:"
    echo "  1. Librewolf (https://librewolf.net/)"
    echo "  2. Chromium (https://chromium.org/)"
    echo "  3. Brave (https://brave.com/)"
    read -r -p "Enter the number of your preferred browser: " choice

    case "$choice" in
        1)
            curl -fsSL https://rpm.librewolf.net/librewolf-repo.repo | pkexec tee /etc/yum.repos.d/librewolf.repo >/dev/null
            sudo dnf upgrade --refresh -y && sudo dnf install librewolf -y
            ;;
        2)
            sudo dnf install chromium -y
            ;;
        3)
            curl -fsS https://dl.brave.com/install.sh | sh
            ;;
        *)
            echo "Invalid choice. Using default (Firefox)."
            ;;
    esac
}

# Install communication apps.
install_communication() {
    echo "Choose your communication app(s) (enter numbers separated by spaces):"
    echo "  1. Discord (https://discord.com/)"
    echo "  2. Vesktop (https://vencord.dev/)"
    echo "  3. Element Desktop (https://element.io/)"
    echo "  4. Telegram Desktop (https://telegram.org/)"
    echo "  5. Signal Desktop (https://signal.org/)"
    
    # Temporarily set IFS to include spaces
    local oldIFS=$IFS
    IFS=' '
    read -ra choices -p "Your choices: "
    IFS=$oldIFS

    for choice in "${choices[@]}"; do
        case "$choice" in
            1)
                sudo dnf install discord -y
                ;;
            2)
                flatpak install -y flathub dev.vencord.Vesktop
                ;;
            3)
                flatpak install -y flathub im.riot.Riot
                ;;
            4)
                sudo dnf install telegram-desktop -y
                ;;
            5)
                flatpak install -y flathub org.signal.Signal
                ;;
            *)
                echo "Invalid choice: $choice"
                ;;
        esac
    done
}

# Install useful developer tools.
add_dev_tools() {
    # sudo dnf groupinstall "Development Tools" "Development Libraries" -y
    sudo dnf install kernel-devel android-tools python3-pip python3-devel git nodejs nodejs-npm -y
}

# Detect Nvidia GPU and offer driver installation.
needs_nvidia() {
    if lspci | grep -qi NVIDIA; then
        read -r -p "Nvidia GPU detected. Install Nvidia drivers (akmod-nvidia)? (y/N) " resp
        if [[ "$resp" =~ ^[yY]$ ]]; then
            sudo dnf install akmod-nvidia -y
            echo "Nvidia drivers installed."
        else
            echo "Skipping Nvidia driver installation."
        fi
    else
        echo "No Nvidia GPU detected."
    fi
}

# Patch for Apple keyboards (hid_apple fn key).
hid_apple_patch() {
    local conf_file="/etc/modprobe.d/hid_apple.conf"
    if [ ! -f "$conf_file" ]; then
        sudo touch "$conf_file"
    fi
    echo "options hid_apple fnmode=0" | sudo tee -a "$conf_file"
    sudo modprobe -r hid_apple
    sudo modprobe hid_apple
}

# Add dracut flags to support bluetooth keyboard during LUKS decryption.
add_dracut_flags() {
    local flags_file="/etc/dracut.conf.d/flags.conf"
    if [ ! -f "$flags_file" ]; then
        sudo touch "$flags_file"
    fi
    echo 'hostonly="yes"' | sudo tee -a "$flags_file"
    echo 'add_dracutmodules+=" bluetooth "' | sudo tee -a "$flags_file"
    sudo dracut --regenerate-all --force --verbose
}

# Install Tor and enable its service.
install_tor() {
    sudo dnf install tor torbrowser-launcher -y
    sudo systemctl enable --now tor
}

# Install extra software by trying DNF first then Flatpak.
install_selection() {
    local oldIFS pkg
    # Save the current IFS and temporarily set it to a space for word splitting.
    oldIFS="$IFS"
    IFS=' '
    for pkg in $*; do
        if rpm -q "$pkg" &>/dev/null; then
            echo "$pkg is already installed."
        else
            echo "Attempting to install $pkg via DNF..."
            if sudo dnf install -y "$pkg"; then
                echo "Installed $pkg via DNF."
            else
                echo "DNF did not find $pkg. Trying Flatpak from flathub..."
                sleep 1
                if flatpak install -y flathub "$pkg"; then
                    echo "Installed $pkg via Flatpak."
                else
                    echo "Error: $pkg not found in DNF or Flatpak repositories."
                fi
            fi
        fi
    done
    IFS="$oldIFS"
}

# Install a custom bash prompt.
setup_bash_prompt() {
    tee -a "$HOME/.bashrc" >/dev/null <<'EOF'
# Vili's Bash prompt
PROMPT_COMMAND='PS1_CMD1=$(git branch --show-current 2>/dev/null)'
PS1='\[\e[2m\]\t\[\e[0m\] ${PS1_CMD1} \$ '
EOF
}

# Main
echo "FQS (Fedora Quick Start) Script"
echo "Finish your post-installation steps easily."
echo "By Vili (https://vili.dev)"
echo "You will be prompted for sudo password as needed."
echo

read -r -p "Do you want to continue with this script? (y/N) " input
if [[ "$input" =~ ^[yY]$ ]]; then
    echo "Starting system upgrade..."
    sleep 2
    sys_update
    echo "System upgrade complete."
    echo

    echo "Enabling RPM Fusion repositories..."
    sleep 2
    add_rpm_repos
    echo "RPM Fusion enabled."
    echo

    echo "Enabling Flathub repository..."
    sleep 2
    add_flatpak_repos
    echo "Flathub enabled."
    echo

    echo "Optimizing DNF configuration..."
    sleep 2
    append_dnf_configs
    echo "DNF configuration updated."
    echo

    echo "Checking for Nvidia GPU..."
    sleep 2
    needs_nvidia
    echo

    echo "Proceeding with user selections..."
    sleep 2

    read -r -p "Patch Bluetooth keyboard FN key (hid_apple)? (y/N) " patch_hid
    if [[ "$patch_hid" =~ ^[yY]$ ]]; then
        hid_apple_patch
        echo "hid_apple patch applied."
    else
        echo "Skipping hid_apple patch."
    fi
    echo

    read -r -p "Allow Bluetooth keyboard during decryption (regenerate initramfs)? (y/N) " patch_dracut
    if [[ "$patch_dracut" =~ ^[yY]$ ]]; then
        add_dracut_flags
        echo "Dracut flags added."
    else
        echo "Skipping dracut flags."
    fi
    echo

    read -r -p "Install an alternative browser (not Firefox)? (y/N) " browser_choice
    if [[ "$browser_choice" =~ ^[yY]$ ]]; then
        install_browser
        echo "Browser installation complete."
    else
        echo "Default browser (Firefox) will be used."
    fi
    echo

    read -r -p "Install communication apps? (y/N) " comm_choice
    if [[ "$comm_choice" =~ ^[yY]$ ]]; then
        install_communication
        echo "Communication apps installed."
    else
        echo "Skipping communication apps."
    fi
    echo

    read -r -p "Install a code editor? (y/N) " editor_choice
    if [[ "$editor_choice" =~ ^[yY]$ ]]; then
        install_code_editor
        echo "Code editor installation complete."
    else
        echo "Skipping code editor installation."
    fi
    echo

    read -r -p "Install developer tools (git, nodejs, etc.)? (y/N) " dev_choice
    if [[ "$dev_choice" =~ ^[yY]$ ]]; then
        add_dev_tools
        echo "Developer tools installed."
    else
        echo "Skipping developer tools."
    fi
    echo

    read -r -p "Install Tor and enable Tor service? (y/N) " tor_choice
    if [[ "$tor_choice" =~ ^[yY]$ ]]; then
        install_tor
        echo "Tor installed and enabled."
    else
        echo "Skipping Tor installation."
    fi
    echo

    read -r -p "Install additional software packages (e.g. 'discord spotify gimp')? (y/N) " extra_choice
    if [[ "$extra_choice" =~ ^[yY]$ ]]; then
        read -r -p "Enter package names (space-separated): " pkg_list
        echo "Installing: $pkg_list"
        install_selection "$pkg_list"
        echo "Optional software installation complete."
        sleep 1
    else
        echo "Skipping optional software installation."
    fi
    echo

    read -r -p "Install my simple and clean Bash prompt: 'CLOCK GIT_BRANCH $ '? (y/N) " bash_prompt_choice
    if [[ "$bash_prompt_choice" =~ ^[yY]$ ]]; then
        echo "Applying the custom Bash prompt..."
        sleep 2
        setup_bash_prompt
        echo "Bash prompt set!"
    else
        echo "Skipping Bash prompt setup."
    fi
    echo "All steps complete, remember to star this on GitHub. Goodbye!"
else
    echo "Script cancelled. Goodbye!"
fi
