#!/usr/bin/bash
# |----------------------------------|
# | Copyright (c) 2024 Vili. GPL-3.0 |
# |----------------------------------|
# Made in Finland, with love.

# Functions
# -----------
# Performs a system update and upgrade.
sys_update() {
    sudo dnf update -y && sudo dnf upgrade -y
}

# Adds and enables the rpm repos.
add_rpm_repos() {
    sudo dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-"$(rpm -E %fedora)".noarch.rpm
    sudo dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-"$(rpm -E %fedora)".noarch.rpm
    sudo dnf group update core -y
}

# Adds and enables flathub repos.
add_flatpak_repos() {
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

# Speeds up dnf.
append_dnf_configs() {
    sudo tee -a /etc/dnf/dnf.conf <<EOF
max_parallel_downloads=10
defaultyes=True
fastestmirror=True
deltarpm=True
EOF
    sudo dnf upgrade --refresh -y
}

# Install the preferred code editor.
install_code_editor() {
    echo "Choose your preferred code editor:"
    echo "1. [Vscode] (https://code.visualstudio.com/) Microsoft Visual Studio Code."
    echo "2. [Vscodium] (https://vscodium.com/) Libre version of Microsoft Visual Studio Code."
    echo "3. [Zed] (https://zed.dev) New and lighting fast text editor made in Rust."

    read -r -p "Enter the number of your preferred editor: " editor_choice

    case $editor_choice in
        1)
            sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
            echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" | sudo tee /etc/yum.repos.d/vscode.repo > /dev/null
            sudo dnf update -y && sudo dnf install code -y
            ;;
        2)
            sudo rpmkeys --import https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg
            printf "[gitlab.com_paulcarroty_vscodium_repo]\nname=download.vscodium.com\nbaseurl=https://download.vscodium.com/rpms/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/-/raw/master/pub.gpg\nmetadata_expire=1h" | sudo tee -a /etc/yum.repos.d/vscodium.repo
            sudo dnf update -y && sudo dnf install codium -y
            ;;
        3)
            curl -f https://zed.dev/install.sh | sh
            ;;
        *)
            echo "Invalid choice. No editor installed."
            ;;
    esac
}

# Add useful developer tools
add_dev_tools() {
    # TODO add more useful tools here...
    # These are the only ones that I personally need
    sudo dnf groupinstall "Development Tools" "Development Libraries" -y
    sudo dnf install kernel-devel android-tools python3-pip python3-devel git nodejs nodejs-npm -y
}

# Installs the Nvidia drivers if an Nvidia GPU is detected
needs_nvidia() {
    if lspci | grep -q NVIDIA; then
        read -r -p "Nvidia GPU detected. Do you want to install Nvidia drivers (akmod-nvidia)? (y/N) " wants_nvidia
        if [[ $wants_nvidia == "y" || $wants_nvidia == "Y" ]]; then
            sudo dnf install akmod-nvidia -y
            echo "Done!"
        else
            echo "Skipping..."
        fi
    else
        echo "System is not using Nvidia."
    fi
}

# Create hid_apple.conf and append options to fix bluetooth FN key problems
# /etc/modprobe.d/hid_apple.conf
# options hid_apple fnmode=0
hid_apple_patch() {
    # Create the hid_apple.conf file if it doesn't exist
    if [ ! -f /etc/modprobe.d/hid_apple.conf ]; then
        sudo touch /etc/modprobe.d/hid_apple.conf
    fi

    echo "options hid_apple fnmode=0" | sudo tee -a /etc/modprobe.d/hid_apple.conf
    sudo modprobe -r hid_apple
    sudo modprobe hid_apple
}

# Create flags.conf to /etc/dracut.conf.d/ to allow using bluetooth keyboard when decrypting
# Added flags:
# hostonly="yes"
# add_dracutmodules+=" bluetooth "
add_dracut_flags() {
    # Create the flags.conf file if it doesn't exist
    if [ ! -f /etc/dracut.conf.d/flags.conf ]; then
        sudo touch /etc/dracut.conf.d/flags.conf
    fi

    echo "hostonly=\"yes\"" | sudo tee -a /etc/dracut.conf.d/flags.conf
    echo "add_dracutmodules+=\" bluetooth \"" | sudo tee -a /etc/dracut.conf.d/flags.conf

    # Regenerate the initramfs to apply the changes
    sudo dracut --regenerate-all --force --verbose
}

# Install tor, enable it and install tor launcher
install_tor() {
    sudo dnf install tor torbrowser-launcher -y
    sudo systemctl enable tor
}

# Install user specified software if any
install_selection() {
    for package in "$@"; do
        if sudo dnf install -y "$package"; then
            # Package installed successfully from DNF
            echo "Package '$package' installed successfully from DNF."
        else
            echo "Not found from DNF, trying flatpak..."
            sleep 1
            if flatpak install -y "$package"; then
                # Package installed successfully from Flatpak
                echo "Package '$package' installed successfully from Flatpak."
            else
                # Package not available in either DNF or Flatpak, print an error message
                echo "Error: Package '$package' not found in DNF or Flatpak repositories."
            fi
        fi
    done
}

# Install zsh with useful plugins and starship.rs
# Change the default shell to zsh
# Add useful aliases, starship eval to .zshrc and install my starship prompt https://raw.githubusercontent.com/vil/starship-prompt/master/starship.toml
setup_shell() {
    sudo dnf install zsh zsh-autosuggestions zsh-syntax-highlighting -y

    mkdir -p ~/.config/
    mkdir -p ~/.config/zsh
    cd ~/.config/zsh || return
    if ! command -v git &> /dev/null
    then
        sudo dnf install git -y
    fi
    git clone https://github.com/marlonrichert/zsh-autocomplete.git
    cd || return

    curl -sS https://starship.rs/install.sh | sh
    chsh -s /usr/bin/zsh

    if [ ! -f ~/.zshrc ]; then
        touch ~/.zshrc
    fi

    tee -a ~/.zshrc <<EOF
# Plugins
source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.config/zsh/zsh-autocomplete/zsh-autocomplete.plugin.zsh

# Aliases
alias d="sudo dnf"
alias c="codium"
alias f="flatpak"

# Initialization of starship
eval "$(starship init zsh)"
EOF

    # Check if starship.toml exists, remove it if it does
    if [ -f ~/.config/starship.toml ]; then
        rm ~/.config/starship.toml
    fi

    wget -q -O ~/.config/starship.toml https://raw.githubusercontent.com/vil/starship-prompt/master/starship.toml

    echo "Done! It's recommended to reboot your system for the new shell to take place."
    echo "Also useful aliases have been added, such as:"
    echo "'d' short for 'sudo dnf'"
    echo "'c' short for 'codium'"
    echo "'f' short for 'flatpak'"
    echo
    echo "You can also create your own aliases by editing the .zshrc file in ~/.zshrc"
}


# Main
# ------------
echo "FQS (Fedora Quick Start) Script"
echo
echo "Finish your post installation steps easily."
echo
echo "By Vili (https://vili.dev/)"
echo
echo "You will be asked for the sudo password!"
echo
read -r -p "Do you want to continue with this script? (y/N) " input
if [[ $input == "y" ||  $input == "Y" ]]; then
    echo "Starting with an system update & upgrade..."
    sleep 2
    sys_update
    echo "Done!"
    echo
    echo "Now enabling RPM Fusion repos..."
    sleep 2
    add_rpm_repos
    echo "Done!"
    echo
    echo "Now enabling flathub repos..."
    sleep 2
    add_flatpak_repos
    echo "Done!"
    echo
    echo "Now speeding up dnf..."
    sleep 2
    append_dnf_configs
    echo "Done!"
    echo
    echo "Checking if you are using a Nvidia GPU..."
    sleep 2
    needs_nvidia
    echo
    echo "Now comes the user selections, read and answer carefully!"
    sleep 2
    echo
    read -r -p "If you use a bluetooth keyboard and your fn key doesn't work correctly (hid_apple fnmode), do you want to patch that? (y/N) " wants_hidapple_patch
    if [[ $wants_hidapple_patch == "y" || $wants_hidapple_patch == "Y" ]]; then
        hid_apple_patch
        echo "Done!"
    else
        echo "Skipping hid_apple patching..."
    fi
    echo
    sleep 1
    read -r -p "If you use a bluetooth keyboard, do you want to allow bluetooth keyboard usage during the device decryption? This will regenerate initramfs with the new flags. (y/N) " wants_dracut_patch
    if [[ $wants_dracut_patch == "y" || $wants_dracut_patch == "Y" ]]; then
        add_dracut_flags
        echo "Done!"
    else
        echo "Skipping adding dracut flags..."
    fi
    sleep 1
    read -r -p "Do you want to install a code editor? (y/N) " wants_code_editor
    if [[ $wants_code_editor == "y" || $wants_code_editor == "Y" ]]; then
        install_code_editor
        echo "Done!"
    else
        echo "Skipping vscodium installation..."
    fi
    echo
    read -r -p "Do you want to install useful development tools, such as git, android-tools, nodejs, npm, python3-pip..? (y/N) " wants_dev_tools
    if [[ $wants_dev_tools == "y" || $wants_dev_tools == "Y" ]]; then
        add_dev_tools
        echo "Done!"
    else
        echo "Skipping devtools installation..."
    fi
    echo
    read -r -p "Do you want to install tor, torbrowser and enable the tor service? (y/N) " wants_tor
    if [[ $wants_tor == "y" || $wants_tor == "Y" ]]; then
        install_tor
        echo "Done!"
    else
        echo "Skipping tor installation..."
    fi
    echo
    read -r -p "Do you want to install anything else? (y/N) " extra_installs
    if [[ $extra_installs == "y" || $extra_installs == "Y" ]]; then
        read -r -p "Alright, what do you want to install? (separated by spaces, for example 'discord spotify gimp') " software
        echo "Installing $software..."
        install_selection "$software"
        echo "Done!"
        sleep 1
    else
        echo "Skipping optional software installation..."
    fi
    echo
    read -r -p "Lastly, do you want to install and setup a better shell? (zsh with starship.rs prompt) (y/N) " wants_shell
    if [[ $wants_shell == "y" || $wants_shell == "Y" ]]; then
        echo "Installing zsh and starship.rs..."
        sleep 2
        setup_shell
        echo "Done!"
    else
        echo "Skipping better shell setup..."
        echo "This was the last step, goodbye!"
    fi
else
    echo "Cancelled, Goodbye!"
fi
