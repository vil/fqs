#!/usr/bin/bash
# |----------------------------------|
# | Copyright (c) 2024 Vili. GPL-3.0 |
# |----------------------------------|
# Made in Finland, with love.

# Functions
# -----------
# Performs a system update and upgrade.
sys_update() {
    sudo dnf update -y && sudo dnf upgrade -y
}

# Adds and enables the rpm repos.
add_rpm_repos() {
    sudo dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    sudo dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
    sudo dnf group update core -y
}

# Adds and enables flathub repos.
add_flatpak_repos() {
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
}

# Speeds up dnf.
append_dnf_configs() {
    sudo tee -a /etc/dnf/dnf.conf <<EOF
max_parallel_downloads=10
defaultyes=True
fastestmirror=True
deltarpm=True
EOF
    sudo dnf upgrade --refresh -y
}

# Add vscode repo and install vscode
add_vscode() {
    rpm --import https://packages.microsoft.com/keys/microsoft.asc
    sudo tee /etc/yum.repos.d/vscode.repo <<EOF
[code]
name=Visual Studio Code
baseurl=https://packages.microsoft.com/yumrepos/vscode
enabled=1
gpgcheck=1
gpgkey=https://packages.microsoft.com/keys/microsoft.asc
EOF
    sudo dnf update -y && sudo dnf install code -y
}

# Add useful developer tools
add_dev_tools() {
    # TODO add more useful tools here...
    # These are the only ones that I personally need
    sudo dnf groupinstall "Development Tools" "Development Libraries" -y
    sudo dnf install kernel-devel android-tools python3-pip python3-devel git nodejs nodejs-npm -y
}

# Installs the Nvidia drivers if an Nvidia GPU is detected
needs_nvidia() {
    if lspci | grep -q NVIDIA; then
        read -r -p "Nvidia GPU detected. Do you want to install Nvidia drivers (akmod-nvidia)? (y/N) " wants_nvidia
        if [[ $wants_nvidia == "y" || $wants_nvidia == "Y" ]]; then
            sudo dnf install akmod-nvidia -y
            echo "Done!"
        else
            echo "Skipping..."
        fi
    else
        echo "System is not using Nvidia."
    fi
}

# Create hid_apple.conf and append options to fix bluetooth FN key problems
# /etc/modprobe.d/hid_apple.conf
# options hid_apple fnmode=0
hid_apple_patch() {
    # Create the hid_apple.conf file if it doesn't exist
    if [ ! -f /etc/modprobe.d/hid_apple.conf ]; then
        sudo touch /etc/modprobe.d/hid_apple.conf
    fi

    echo "options hid_apple fnmode=0" | sudo tee -a /etc/modprobe.d/hid_apple.conf
    sudo modprobe -r hid_apple
    sudo modprobe hid_apple
}

# Create flags.conf to /etc/dracut.conf.d/ to allow using bluetooth keyboard when decrypting
# Added flags:
# hostonly="yes"
# add_dracutmodules+=" bluetooth "
add_dracut_flags() {
    # Create the flags.conf file if it doesn't exist
    if [ ! -f /etc/dracut.conf.d/flags.conf ]; then
        sudo touch /etc/dracut.conf.d/flags.conf
    fi

    echo "hostonly=\"yes\"" | sudo tee -a /etc/dracut.conf.d/flags.conf
    echo "add_dracutmodules+=\" bluetooth \"" | sudo tee -a /etc/dracut.conf.d/flags.conf

    # Regenerate the initramfs to apply the changes
    sudo dracut --regenerate-all --force --verbose
}

# Install tor, enable it and install tor launcher
install_tor() {
    sudo dnf install tor torbrowser-launcher -y
    sudo systemctl enable tor
}

# Install user specified software if any
install_selection() {
    for package in "$@"; do
        if sudo dnf list --quiet "$package" &> /dev/null; then
            # Package is available in DNF repositories, install it
            sudo dnf install "$package" -y
        else
            # Package is not available in DNF repositories, search for it in Flatpak
            if flatpak search --quiet "$package" &> /dev/null; then
                # Package is available in Flatpak, install it
                flatpak install "$package" -y
            else
                # Package is not available in either DNF or Flatpak, print an error message
                echo "Error: Package '$package' not found in DNF or Flatpak repositories."
            fi
        fi
    done
}

# Install oh-my-zsh
install_oh_my_zsh() {
    sudo dnf install zsh git -y
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
}


# Main
# ------------
if [ $(whoami) = "root" ]; then
    echo "FQS (Fedora Quick Start) Script"
    echo
    echo "Finish your post installation steps easily."
    echo
    echo "By Vili (https://vili.dev/)"
    echo
    read -r -p "Do you want to continue with this script? (y/N) " input
    if [[ $input == "y" ||  $input == "Y" ]]; then
        echo "Starting with an system update & upgrade..."
        sleep 2
        sys_update
        echo "Done!"
        echo
        echo "Now enabling RPM Fusion repos..."
        sleep 2
        add_rpm_repos
        echo "Done!"
        echo
        echo "Now enabling flathub repos..."
        sleep 2
        add_flatpak_repos
        echo "Done!"
        echo
        echo "Now speeding up dnf..."
        sleep 2
        append_dnf_configs
        echo "Done!"
        echo
        echo "Checking if you are using a Nvidia GPU..."
        sleep 2
        needs_nvidia
        echo
        echo "Now comes the user selections, read and answer carefully!"
        sleep 2
        echo
        read -r -p "If you use a bluetooth keyboard, do you want to allow bluetooth keyboard usage during the device decryption? This will regenerate initramfs with the new flags. (y/N) " wants_dracut_patch
        if [[ $wants_dracut_patch == "y" || $wants_dracut_patch == "Y" ]]; then
            add_dracut_flags
            echo "Done!"
        else
            echo "Skipping adding dracut flags..."
        fi
        sleep 1
        read -r -p "If you use a bluetooth keyboard and your fn key doesn't work correctly, do you want to patch that? (y/N) " wants_hidapple_patch
        if [[ $wants_hidapple_patch == "y" || $wants_hidapple_patch == "Y" ]]; then
            hid_apple_patch
            echo "Done!"
        else
            echo "Skipping hid_apple patching..."
        fi
        echo
        sleep 1
        read -r -p "Do you want to enable vscode repos and install vscode? (y/N) " wants_vscode
        if [[ $wants_vscode == "y" || $wants_vscode == "Y" ]]; then
            add_vscode
            echo "Done!"
        else
            echo "Skipping vscode installation..."
        fi
        echo
        read -r -p "Do you want to install useful development tools? (y/N) " wants_dev_tools
        if [[ $wants_dev_tools == "y" || $wants_dev_tools == "Y" ]]; then
            add_dev_tools
            echo "Done!"
        else
            echo "Skipping devtools installation..."
        fi
        echo
        read -r -p "Do you want to install tor, torbrowser and enable the tor service? (y/N) " wants_tor
        if [[ $wants_tor == "y" || $wants_tor == "Y" ]]; then
            install_tor
            echo "Done!"
        else
            echo "Skipping tor installation..."
        fi
        echo
        read -r -p "Do you want to install anything else? (y/N) " extra_installs
        if [[ $extra_installs == "y" || $extra_installs == "Y" ]]; then
            read -r -p "Alright, what do you want to install? (separated by spaces) " software
            echo "Installing $software..."
            install_selection $software
            echo "Done!"
            sleep 1
        else
            echo "Skipping optional software installation..."
        fi
        echo
        read -r -p "Lastly, do you want to install oh-my-zsh, for a nicer and better shell? (y/N) " ohmyzsh
        if [[ $ohmyzsh == "y" || $ohmyzsh == "Y" ]]; then
            echo "Installing oh-my-zsh... This is the last step, remember to reboot your system after this!"
            sleep 2
            install_oh_my_zsh
            echo "Done!"
        else
            echo "Skipping oh-my-zsh installation..."
        fi
    else
        echo "Cancelled, Goodbye!"
    fi        
else          
    echo "Please run this script with sudo..!"
fi
